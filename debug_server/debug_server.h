//==================================================================================================
// 文件：debug_server.h
// 作者：顾宇浩
// 简介：基于DebugIoStream类的调试服务器套件
// 上次修改：2020-5-15 (v2.0.0)
//==================================================================================================

#pragma once
#include <map>
#include <string>
#include "DebugIoStream.h"



//==================================================================================================
// 类名：DebugCmd（纯虚）
// 说明：
//		调试指令类纯虚接口，用户的指令应当继承此类以符合接口。
//		指令的operator()函数没有接受DebugServer的引用，是因为在这个调试服务器模型中的指令不是调试服务器
//		敏感的，也就是说，指令不应该因为哪个服务器调用它而效果有所不同。
//==================================================================================================
class DebugCmd
{
public:
	//==============================================================================================
	// 函数：info
	// 参数：无
	// 返回：存放详情信息的C字符串
	// 说明：这个函数返回命令的详情信息
	//==============================================================================================
	virtual const char* info() = 0;

	//==============================================================================================
	// 函数：operator()
	// 参数：
	//		in - 参数输入流
	//		out - 命令使用的输出流
	//
	// 返回：终止标志，返回true表示调试服务器继续运行，false表示终止主循环。
	// 说明：使用in读入命令的附加参数，使用out输出命令想打印的信息
	//==============================================================================================
	virtual bool operator()(ICharStream& in, OCharStream out) = 0;
};



//==================================================================================================
// 类名：DebugCmdMap
// 说明：调试指令表类
//==================================================================================================
using DebugCmdMap = std::map<std::string, DebugCmd*>;



//==================================================================================================
// 类名：DebugServer
// 说明：
//		调试服务器类。
//		这个类被设计成为一个全局对象，所以在初始化中使用的是引用，在其他情况下的语义还没有经过仔细论证。
//==================================================================================================
class DebugServer
{
public:
	//==============================================================================================
	// 类名：ReturnCode（枚举）
	// 说明：这个枚举用于调试服务器主函数的返回值。
	//==============================================================================================
	enum class ReturnCode : uint8_t
	{
		kOK = 0,				// 正常返回
		kIostreamBroken = 1		// IO流损坏
	};

public:
	//==============================================================================================
	// 函数：构造
	// 参数：
	//		ios - 调试输出输出流
	//		cmdMap - 调试指令表
	//
	// 说明：无
	//==============================================================================================
	DebugServer(DebugIoStream& ios, DebugCmdMap& cmdMap) :_ios(ios), _cmdMap(cmdMap) {}

public:
	//==============================================================================================
	// 函数：main
	// 参数：无
	// 返回：ReturnCode枚举
	// 说明：调试服务器主函数
	//==============================================================================================
	ReturnCode main();

public:
	/* 原始访问 */

	//==============================================================================================
	// 函数：ios
	// 参数：无
	// 返回：调试服务器所用的调试IO流
	// 说明：这个函数提供对调试服务器用的调试IO流的原始访问。
	//==============================================================================================
	DebugIoStream& ios() { return _ios; }

	//==============================================================================================
	// 函数：cmd_map
	// 参数：无
	// 返回：调试服务器所用的调试指令列表
	// 说明：这个函数提供对调试服务器用的调试指令列表的原始访问。
	//==============================================================================================
	DebugCmdMap& cmd_map() { return _cmdMap; }

private:
	DebugIoStream& _ios;
	DebugCmdMap& _cmdMap;

private:
	void invalid_cmd(const std::string& str);  // 无效指令处理
};



//==================================================================================================
// inlines: DebugServer
//==================================================================================================

inline void DebugServer::invalid_cmd(const std::string& str)
{
	_ios << "[ INVALID COMMAND: \"" << str << " \"]\n\n";
}
