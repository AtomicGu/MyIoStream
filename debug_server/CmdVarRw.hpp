//==================================================================================================
// 文件：CmdVarRw.hpp
// 作者：顾宇浩
// 简介：一个变量操作（读写）的指令类模板
// 上次修改：2020-6-16 (v1.0.0)
//==================================================================================================

#pragma once
#include "DebugCmd.h"


//==================================================================================================
// 类名：CmdVarRw（模板）
// 参数：T - 变量类型
// 说明：
//		一个变量操作（读写）的指令类模板。
//		T类型必须支持>>和<<运算符。
//		具体输入语法取决于运算符>>的实现。
//==================================================================================================
template <typename T>
class CmdVarRw :public DebugCmd
{
public:
	//==============================================================================================
	// 函数：构造
	// 参数：var_p - 变量指针
	// 说明：无
	//==============================================================================================
	CmdVarRw(T* var_p);

	//==============================================================================================
	// 函数：info
	// 参数：无
	// 返回：存放详情信息的C字符串
	// 说明：这个函数返回命令的详情信息
	//==============================================================================================
	virtual const char* info();

	//==============================================================================================
	// 函数：operator()
	// 参数：
	//		in - 参数输入流
	//		out - 命令使用的输出流
	//
	// 返回：终止标志，返回true表示调试服务器继续运行，false表示终止主循环。
	// 说明：使用in读入命令的附加参数，使用out输出命令想打印的信息
	//==============================================================================================
	virtual bool operator()(ICharStream& in, OCharStream out);

private:
	T* _var_p;
};



//==================================================================================================
// inlines: CmdVarRw
//==================================================================================================

template<typename T>
inline CmdVarRw<T>::CmdVarRw(T* var_p) :
	_var_p(var_p)
{
}

template<typename T>
inline const char* CmdVarRw<T>::info()
{
	return R"(set variables

Usage:
  <$> { get | set <value> }

  get : get value

  set : set value
    <value> : new value

The syntax of value is determined by the type of the variable.
)";
}



//==================================================================================================
// Code
//==================================================================================================

template<typename T>
bool CmdVarRw<T>::operator()(ICharStream& in, OCharStream out)
{
	std::string subCmd = in.get_full_section();

	if (subCmd == "get")
	{
		out << *_var_p << '\n';
	}
	else if (subCmd == "set")
	{
		if (!(in >> *_var_p))
			out << "invalid value\n";
		else
			out << *_var_p << '\n';
	}
	else
	{
		out << R"(invalid sub command

Use "get" to get value, "set" to set value.
)";
	}

	return true;
}
