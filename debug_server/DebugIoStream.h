//==================================================================================================
// 文件：DebugIoStream.h
// 作者：顾宇浩
// 简介：调试输入输出流类
// 上次修改：2020-5-9 (v1.0.0)
//==================================================================================================

#pragma once
#include "char_stream.h"



//==================================================================================================
// 类名：DebugIoStream
// 说明：调试输入输出流类，这个类用于异步的调试，可以用来判断有没有调试输入的到来。
//==================================================================================================
class DebugIoStream :public ICharStream, public OCharStream, public AsyncIByteStream, public AsyncOByteStream
{
public:
	//==============================================================================================
	// 函数：构造
	// 参数：
	//		in - 输入字节流
	//		out - 输出字节流
	//
	// 说明：无
	//==============================================================================================
	DebugIoStream(AsyncIByteStream& in, AsyncOByteStream& out);

public:
	//==============================================================================================
	// 函数：get
	// 参数：p - 存放取出字符的指针
	// 返回：成功返回true；失败返回false
	// 说明：从流中取出一个字符
	//==============================================================================================
	virtual bool get(Byte* p) { return _peeked ? (_peeked = false, *p = _peekBuf, true) : _in.get(p); }

	//==============================================================================================
	// 函数：put
	// 参数：c - 放入字符
	// 返回：成功返回true；失败返回false，同时置错误状态。
	// 说明：往流中放入一个字符
	//==============================================================================================
	virtual bool put(Byte c) { return _out.put(c); }

	//==============================================================================================
	// 函数：try_get
	// 参数：p - 存放取出字符的指针
	// 返回：成功返回true；失败返回false
	// 说明：尝试从流中取出一个字符，失败时p指向内容不被修改。
	//==============================================================================================
	virtual bool try_get(Byte* p) { return _in.try_get(p); }

	//==============================================================================================
	// 函数：try_put
	// 参数：c - 放入字符
	// 返回：成功返回true；失败返回false
	// 说明：尝试往流中放入一个字符
	//==============================================================================================
	virtual bool try_put(Byte c) { return _out.try_put(c); }

	//==============================================================================================
	// 函数：has_input
	// 参数：无
	// 返回：若有输入信息，返回true，否则返回false。
	// 说明：用于检查是否有新的调试输入
	//==============================================================================================
	bool has_input() { return _peeked || (_peeked = _in.try_get(&_peekBuf)); }

private:
	AsyncIByteStream& _in;
	AsyncOByteStream& _out;
	bool _peeked;
	Byte _peekBuf;
};



//==================================================================================================
// inlines: DebugIoStream
//==================================================================================================

inline DebugIoStream::DebugIoStream(AsyncIByteStream& in, AsyncOByteStream& out)
	: ICharStream((IByteStream&)*this)
	, OCharStream(out)
	, _in(in)
	, _out(out)
	, _peeked(false)
{
}
