//==================================================================================================
// 文件：str_stream.h
// 作者：顾宇浩
// 简介：内存字符串流
// 上次修改：2020-5-15 (v1.0.1)
//==================================================================================================

#pragma once
#include "char_stream.h"



//==================================================================================================
// 类名：IStrStream
// 说明：字符串输入流类，用于包装内存中的字符串以符合流接口。
//==================================================================================================
class IStrStream :public ICharStream
{
public:
	//==============================================================================================
	// 函数：构造（重载）
	// 参数：ps - 字符串首地址
	// 说明：请小心指针悬挂
	//==============================================================================================
	IStrStream(const char* ps) :ICharStream((IByteStream&)*this), _ps(ps) {}

	//==============================================================================================
	// 函数：构造（重载）
	// 参数：str - C++字符串
	// 说明：请小心指针悬挂
	//==============================================================================================
	IStrStream(const std::string& str) :ICharStream((IByteStream&)*this), _ps(str.c_str()) {}

public:
	//==============================================================================================
	// 函数：get
	// 参数：p - 存放取出元素的指针
	// 返回：成功返回true；失败返回false
	// 说明：从流中取出一个元素
	//==============================================================================================
	virtual bool get(Byte* p);

private:
	const char* _ps;
};



//==================================================================================================
// inlines: IStrStream
//==================================================================================================

inline bool IStrStream::get(Byte* p)
{
	if (_ps == nullptr)
		return false;
	*p = *_ps;
	if (*p == '\0')
		_ps = nullptr;
	else
		++_ps;
	return true;
}
